<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fxj.mapper.BlockMapper">
  <resultMap id="BaseResultMap" type="com.fxj.bean.Block">
    <constructor>
      <idArg column="blockhash" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="blockchain_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="height" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="tx_size" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="size_on_disk" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="difficulty" javaType="java.lang.Double" jdbcType="DOUBLE" />
      <arg column="prev_blockhash" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="next_blockhash" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="output_total" javaType="java.lang.Double" jdbcType="DOUBLE" />
      <arg column="transaction_fees" javaType="java.lang.Double" jdbcType="DOUBLE" />
      <arg column="merkle_root" javaType="java.lang.String" jdbcType="CHAR" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    blockhash, blockchain_id, height, time, tx_size, size_on_disk, difficulty, prev_blockhash, 
    next_blockhash, output_total, transaction_fees, merkle_root
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.fxj.bean.Block">
    insert into block (blockhash, blockchain_id, height, 
      time, tx_size, size_on_disk, 
      difficulty, prev_blockhash, next_blockhash, 
      output_total, transaction_fees, merkle_root
      )
    values (#{blockhash,jdbcType=CHAR}, #{blockchainId,jdbcType=INTEGER}, #{height,jdbcType=INTEGER}, 
      #{time,jdbcType=TIMESTAMP}, #{txSize,jdbcType=INTEGER}, #{sizeOnDisk,jdbcType=BIGINT}, 
      #{difficulty,jdbcType=DOUBLE}, #{prevBlockhash,jdbcType=CHAR}, #{nextBlockhash,jdbcType=CHAR}, 
      #{outputTotal,jdbcType=DOUBLE}, #{transactionFees,jdbcType=DOUBLE}, #{merkleRoot,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective">
    insert into block
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="hash != null">
        blockhash,
      </if>
        blockchain_id,
      <if test="height != null">
        height,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="nTx != null">
        tx_size,
      </if>
      <if test="size != null">
        size_on_disk,
      </if>
      <if test="difficulty != null">
        difficulty,
      </if>
      <if test="previousblockhash != null">
        prev_blockhash,
      </if>
      <if test="nextblockhash != null">
        next_blockhash,
      </if>
      <if test="merkleroot != null">
        merkle_root,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="hash != null">
        #{hash,jdbcType=CHAR},
      </if>
        1,
      <if test="height != null">
        #{height,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time},
      </if>
      <if test="nTx != null">
        #{nTx,jdbcType=INTEGER},
      </if>
      <if test="size != null">
        #{size,jdbcType=BIGINT},
      </if>
      <if test="difficulty != null">
        #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="previousblockhash != null">
        #{previousblockhash,jdbcType=CHAR},
      </if>
      <if test="nextblockhash != null">
        #{nextblockhash,jdbcType=CHAR},
      </if>
      <if test="merkleroot != null">
        #{merkleroot,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.fxj.bean.Block">
    update block
    <set>
      <if test="blockchainId != null">
        blockchain_id = #{blockchainId,jdbcType=INTEGER},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="txSize != null">
        tx_size = #{txSize,jdbcType=INTEGER},
      </if>
      <if test="sizeOnDisk != null">
        size_on_disk = #{sizeOnDisk,jdbcType=BIGINT},
      </if>
      <if test="difficulty != null">
        difficulty = #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="prevBlockhash != null">
        prev_blockhash = #{prevBlockhash,jdbcType=CHAR},
      </if>
      <if test="nextBlockhash != null">
        next_blockhash = #{nextBlockhash,jdbcType=CHAR},
      </if>
      <if test="outputTotal != null">
        output_total = #{outputTotal,jdbcType=DOUBLE},
      </if>
      <if test="transactionFees != null">
        transaction_fees = #{transactionFees,jdbcType=DOUBLE},
      </if>
      <if test="merkleRoot != null">
        merkle_root = #{merkleRoot,jdbcType=CHAR},
      </if>
    </set>
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fxj.bean.Block">
    update block
    set blockchain_id = #{blockchainId,jdbcType=INTEGER},
      height = #{height,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP},
      tx_size = #{txSize,jdbcType=INTEGER},
      size_on_disk = #{sizeOnDisk,jdbcType=BIGINT},
      difficulty = #{difficulty,jdbcType=DOUBLE},
      prev_blockhash = #{prevBlockhash,jdbcType=CHAR},
      next_blockhash = #{nextBlockhash,jdbcType=CHAR},
      output_total = #{outputTotal,jdbcType=DOUBLE},
      transaction_fees = #{transactionFees,jdbcType=DOUBLE},
      merkle_root = #{merkleRoot,jdbcType=CHAR}
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>

  <update id="truncate">
    truncate block;
  </update>

</mapper>